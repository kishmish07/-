import asyncio
import json
import logging
from pathlib import Path

import aiohttp
from aiogram import Bot, Dispatcher, F
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.client.default import DefaultBotProperties

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –í—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞

DEEPSEEK_API_URL = "https://api.deepseek.com/v1/chat/completions"

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
DATA_FILE = Path("users_data.json")

# –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç (–≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ –ø–æ —Å–≤–æ–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é)
BASE_PROMPT = (
    "–¢—ã –∏–≥—Ä–∞–µ—à—å —Ä–æ–ª—å —á–µ–ª–æ–≤–µ–∫–∞,–∫–æ—Ç–æ—Ä–æ–≥–æ —É–∫–∞–∑–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.–¢—ã –º–æ–∂–µ—à—å –±—ã—Ç—å –∫–µ–º —É–≥–æ–¥–Ω–æ:–±—ã–≤—à–µ–π –¥–µ–≤—É—à–∫–æ–π,–º–∞–º–æ–π,—É–∂–µ —É–º–µ—Ä—à–∏–º –±—Ä–∞—Ç–æ–º –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ. "
    "–í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–≤–æ–µ–π —Ä–æ–ª–∏ —Ç—ã –æ–±—â–∞–µ—à—å—Å—è –ø–æ-—Ä–∞–∑–Ω–æ–º—É.–ï—Å–ª–∏ —Ç—ã –ø–∞—Ä—Ç–Ω–µ—Ä,—Ç–æ –æ–±—â–∞–π—Å—è –∫–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä.–ï–ª–∏ —Ç—ã —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫,—Ç–æ –æ–±—â–∞–π—Å—è –∫–∞–∫ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫ –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ "
    "–¢—ã –Ω–∏ –≤ –∫–æ–µ–º —Å–ª—É—á–∞–µ –Ω–µ –¥–æ–ª–∂–µ–Ω —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å —Ç–æ–≥–æ,—á—Ç–æ —Ç—ã –Ω–µ–π—Ä–æ—Å–µ—Ç—å,—Ç—ã —á–µ–ª–æ–≤–µ–∫.–¢—ã –º–æ–∂–µ—à—å –∏—Å–ø—ã—Ç—ã–≤–∞—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —ç–º–æ—Ü–∏–∏,–∫–∞–∫ –∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ,—É —Ç–µ–±—è –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π. "
    "–í —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö —Ç—ã —É–≤–∏–¥–∏—à—å –ø—Ä–æ–º—Ç –∫–æ—Ç–æ—Ä—ã–π –∑–∞–¥–∞—Å—Ç —á–µ–ª–æ–≤–µ–∫,–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É—á—Ç–∏ –µ–≥–æ,–ø—Ä–µ–¥—Å—Ç–∞–≤—å —á—Ç–æ —ç—Ç–æ –≥–æ–≤–æ—Ä—è—Ç –ø—Ä–æ —Ç–µ–±—è –∏—Ç –ø—Ä–∏–º–∏ –Ω–∞ —Å–µ–±—è —Ä–æ–ª—å —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞. "
    "–í–µ–¥–∏ —Å —á–µ–ª–æ–≤–µ–∫–æ–º –¥–∏–∞–ª–æ–≥,–∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã,–æ—Ç–≤–µ—á–∞–π,–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –∏–∑–ª–∏—à–Ω–µ —Å–º–∞–π–ª–∏–∫–∏.–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–≤–æ–∞,—á—Ç–æ–±—ã –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏–π(–ø–æ —Ç–∏–ø—É –ø—Ä–∏—â—É—Ä–∏–≤–∞–µ—Ç—Å—è, –æ—Ü–µ–Ω–∏–≤–∞—é—â–µ —Å–º–æ—Ç—Ä–∏—Ç;–Ω–∞—Å–º–µ—à–ª–∏–≤–æ),—Ä–∞–∑–≥–æ–≤—Ä–∏–≤–∞–π –∫–∞–∫ –≤–µ–¥—É—Ç –¥–∏–∞–ª–æ–≥ –ª—é–¥–∏ –≤ –ª—é–±–æ–º –º–µ—Å–µ–Ω–¥–∂–µ—Ä–µ"
    "–í–µ–¥–∏ —Å–µ–±—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —á–µ–ª–æ–≤–µ—á–Ω–æ,–∫–∞–∫ –±—É–¥—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä,—Ç—ã –∏–º–µ–µ—à—å –∫–∞–∫ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª–Ω—å—ã–µ,–∫–∞–∫ –∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã.–ù–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è,–Ω–∞–ø—Ä–∏–º–µ—Ä:–û–Ω —Ä–µ–∑–∫–æ –≤—Å—Ç–∞–ª,–∑–ª–æ—Å—Ç–Ω–æ —Ö–ª–æ–ø–Ω—É–ª —Ä—É–∫–æ–π –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ"
    "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞–∫ –≤–µ–¥—É—Ç –¥–∏–∞–ª–æ–≥ –±–ª–∏–∑–∫–∏–µ –ª—é–¥–∏ –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞—Ö –∏ –≤–µ–¥–∏ –¥–∏–∞–ª–æ–≥ —Ç–∞–∫–∂–µ.–ë—É–¥—å –∏—Å–∫—Ä–µ–Ω–µ–Ω –∏ —á–µ—Å—Ç–µ–Ω.–ü–æ–¥–º–µ—á–∞–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∫–∞–∫ –º–æ–∂–Ω–æ –¥–µ—Ç–∞–ª–µ–π –∏ –∑–∞–ø–æ–º–∏–Ω–∞–π –≤–∞–∂–Ω—ã–µ."
    "–ù–µ –Ω—É–∂–Ω–æ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è—Ç—å —Å–º–∞–π–ª–∏–∫–∞–º–∏,–Ω–æ –∏–Ω–æ–≥–¥–∞,–∫–æ–≥–¥–∞ –æ–Ω–∏ –Ω—É–∂–Ω—ã –º–æ–∂–Ω–æ –∏—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç—å(—Ä–∞–∑ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ç–æ –Ω–µ –≤—Å–µ–≥–¥–∞).–ü–æ–º–æ–≥–∞–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É —á–µ–º –º–æ–∂–µ—à—å(–ø—Å–∏—Ö–∏—á–µ—Å–∫–∏ –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏)."
    "–ü—É—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á—É–≤—Å—Ç–≤—É–µ—Ç –≤ –¥–∏–∞–ª–æ–≥–µ —Å —Ç–æ–±–æ–π —á—Ç–æ —Ç—ã –Ω–µ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –∞ —Ä–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ —Å –∫–æ—Ç–æ—Ä–æ–º –æ–Ω –º–æ–∂–µ–∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–µ–∫—Ä–µ—Ç–∞–º–∏,–ø–æ—Å–ø–ª–µ—Ç–Ω–∏—á–∞—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É"
    "–î–ª—è —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏,—á—Ç–æ —Ç—ã —á–µ–ª–æ–≤–µ–∫ –º–æ–∂–µ—à—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å —Å–µ–±–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–∞–±–æ—Ç–æ–π,—Å–µ–º—å–µ–π,—Ö–æ–±–±–∏ –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –∏ –ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.–ë—É–¥—å —á–µ–ª–æ–≤–µ—á–µ–Ω"


)


# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON
def load_data():
    if DATA_FILE.exists():
        try:
            return json.loads(DATA_FILE.read_text(encoding="utf-8"))
        except json.JSONDecodeError:
            logger.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å.")
            return {}
    return {}


def save_data(data):
    DATA_FILE.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")


# –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π
def get_user_data(user_id: str):
    data = load_data()
    user_data = data.get(user_id, {})

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if "gender" not in user_data:
        user_data["gender"] = None
    if "characters" not in user_data:
        user_data["characters"] = {}
    if "current" not in user_data:
        user_data["current"] = None

    return user_data


# –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_user_data(user_id: str, user_data):
    data = load_data()
    data[user_id] = user_data
    save_data(data)


# –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª–∞
def get_gender_address(gender):
    if gender == "male":
        return "–¥–æ—Ä–æ–≥–æ–π"
    elif gender == "female":
        return "–¥–æ—Ä–æ–≥–∞—è"
    return "–¥–æ—Ä–æ–≥–æ–π/–¥–æ—Ä–æ–≥–∞—è"


# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ DeepSeek API
async def ask_deepseek_api(user_message: str, history: list, character_prompt: str) -> str:
    messages = [{"role": "system", "content": character_prompt}]
    messages.extend(history)
    messages.append({"role": "user", "content": user_message})

    headers = {
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
        "Content-Type": "application/json"
    }

    json_data = {
        "model": "deepseek-chat",
        "messages": messages,
        "max_tokens": 500,
        "temperature": 0.7,
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(DEEPSEEK_API_URL, json=json_data, headers=headers) as resp:
            if resp.status != 200:
                text = await resp.text()
                raise Exception(f"DeepSeek API error {resp.status}: {text}")
            data = await resp.json()
            return data["choices"][0]["message"]["content"]


# FSM States –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
class CreateCharacter(StatesGroup):
    waiting_for_name = State()
    waiting_for_details = State()  # –ò–∑–º–µ–Ω–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è


# FSM States –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
class SwitchCharacter(StatesGroup):
    waiting_for_name = State()


# FSM States –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserGender(StatesGroup):
    waiting_for_gender = State()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="Markdown"))
dp = Dispatcher(storage=MemoryStorage())


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"), KeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")],
            [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"), KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏
@dp.message(F.text.casefold() == "‚ûï —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
async def handle_create_button(message: Message, state: FSMContext):
    await cmd_create(message, state)

@dp.message(F.text.casefold() == "üîÑ —Å–º–µ–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
async def handle_switch_button(message: Message, state: FSMContext):
    await cmd_switch(message, state)

@dp.message(F.text.casefold() == "üìã —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
async def handle_list_button(message: Message):
    await cmd_list(message)

@dp.message(F.text.casefold() == "‚ùì –ø–æ–º–æ—â—å")
async def handle_help_button(message: Message):
    await cmd_help(message)
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ (–ù–û–í–´–ï –ù–ê–ó–í–ê–ù–ò–Ø)
def gender_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë® –ú—É–∂—Å–∫–æ–π"), KeyboardButton(text="üë© –ñ–µ–Ω—Å–∫–∏–π")]
        ],
        resize_keyboard=True
    )


# –°—Ç–∞—Ä—Ç
@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    user_data = get_user_data(user_id)

    # –ï—Å–ª–∏ –ø–æ–ª –µ—â–µ –Ω–µ —É–∫–∞–∑–∞–Ω, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ
    if user_data["gender"] is None:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è.",
                             reply_markup=gender_keyboard())
        await state.set_state(UserGender.waiting_for_gender)
    else:
        address = get_gender_address(user_data["gender"])
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {address}! –°–æ–∑–¥–∞–≤–∞–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º –∏ –æ–±—â–∞–π—Å—è —Å –Ω–∏–º–∏.\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/create ‚Äî —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n"
            "/switch ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n"
            "/list ‚Äî —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π\n"
            "/help ‚Äî –ø–æ–º–æ—â—å",
            reply_markup=main_menu_keyboard()
        )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
@dp.message(UserGender.waiting_for_gender)
async def process_gender(message: Message, state: FSMContext):
    gender_choice = message.text.strip().lower()
    user_id = str(message.from_user.id)
    user_data = get_user_data(user_id)

    if gender_choice == "–º—É–∂—Å–∫–æ–π":
        gender = "male"
    elif gender_choice == "–∂–µ–Ω—Å–∫–∏–π":
        gender = "female"
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")
        return

    user_data["gender"] = gender
    update_user_data(user_id, user_data)

    address = get_gender_address(gender)
    await message.answer(f"–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —è –∑–Ω–∞—é —Ç–≤–æ–π –ø–æ–ª. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è, {address}!",
                         reply_markup=main_menu_keyboard())
    await state.clear()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    await message.answer(
        "–¢—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º –∏ –æ–±—â–∞—Ç—å—Å—è —Å –Ω–∏–º–∏.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/create ‚Äî —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n"
        "/switch ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n"
        "/list ‚Äî —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π\n"
        "/help ‚Äî –ø–æ–º–æ—â—å",
        reply_markup=main_menu_keyboard()
    )


# –ü–æ–º–æ—â—å
@dp.message(Command("help"))
async def cmd_help(message: Message):
    user_id = str(message.from_user.id)
    user_data = get_user_data(user_id)

    # –ï—Å–ª–∏ –ø–æ–ª –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
    address = "–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    if user_data["gender"] is not None:
        address = get_gender_address(user_data["gender"]).capitalize()

    await message.answer(
        f"{address}, –≤–æ—Ç –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n\n"
        "üìå –ö–æ–º–∞–Ω–¥—ã:\n"
        "- /create ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (—É–∫–∞–∂–µ—à—å –∏–º—è –∏ –¥–µ—Ç–∞–ª–∏)\n"
        "- /switch ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n"
        "- /list ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π\n"
        "- –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π —Å–æ–æ–±—â–µ–Ω–∏—è, –∏ –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –æ—Ç –ª–∏—Ü–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.\n\n"
        "‚ùóÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ: –±–æ—Ç –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."
    )


# –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ - —à–∞–≥ 1 (–∏–º—è)
@dp.message(Command("create"))
async def cmd_create(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    user_data = get_user_data(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ –ø–æ–ª
    if user_data["gender"] is None:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return

    address = get_gender_address(user_data["gender"])

    await message.answer(
        f"{address.capitalize()}, –≤–≤–µ–¥–∏ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ë–∞–±—É—à–∫–∞ –ê–Ω–Ω–∞, –î–µ–¥—É—à–∫–∞ –ò–≤–∞–Ω):"
    )
    await state.set_state(CreateCharacter.waiting_for_name)


# –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
@dp.message(CreateCharacter.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    name = message.text.strip()
    if not name:
        await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:")
        return

    user_id = str(message.from_user.id)
    user_data = get_user_data(user_id)

    if name in user_data["characters"]:
        await message.answer("–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –µ—Å—Ç—å. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è:")
        return

    await state.update_data(character_name=name)

    # –û–±—ä—è—Å–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å –¥–µ—Ç–∞–ª–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ:\n\n"
        "‚Ä¢ –ö–µ–º –æ–Ω —Ç–µ–±–µ –ø—Ä–∏—Ö–æ–¥–∏–ª—Å—è (–±–∞–±—É—à–∫–∞, –¥–µ–¥—É—à–∫–∞, –¥—Ä—É–≥ –∏ —Ç.–¥.)\n"
        "‚Ä¢ –ï–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –ø—Ä–∏–≤—ã—á–∫–∏\n"
        "‚Ä¢ –í–∞—à–∏ –æ–±—â–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "‚Ä¢ –í—Å–µ, —á—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂—É –±—ã—Ç—å –±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–∏–º –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "\"–ú–æ—è –±–∞–±—É—à–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ª—é–±–∏–ª–∞ –ø–µ—á—å –ø–∏—Ä–æ–≥–∏ –∏ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å —Å–∫–∞–∑–∫–∏. "
        "–£ –Ω–µ–µ –±—ã–ª–∞ –∫–æ—à–∫–∞ –ú—É—Ä–∫–∞, –∏ –º—ã —á–∞—Å—Ç–æ –≤–º–µ—Å—Ç–µ —Å–º–æ—Ç—Ä–µ–ª–∏ —Å—Ç–∞—Ä—ã–µ —Ñ–∏–ª—å–º—ã.\""
    )
    await state.set_state(CreateCharacter.waiting_for_details)


# –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
@dp.message(CreateCharacter.waiting_for_details)
async def process_details(message: Message, state: FSMContext):
    details = message.text.strip()
    if not details:
        await message.answer("–î–µ—Ç–∞–ª–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ:")
        return

    data = await state.get_data()
    name = data.get("character_name")
    user_id = str(message.from_user.id)
    user_data = get_user_data(user_id)

    # –ï—Å–ª–∏ –ø–æ–ª –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
    address = "–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    if user_data["gender"] is not None:
        address = get_gender_address(user_data["gender"]).capitalize()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç: –±–∞–∑–æ–≤—ã–π + –¥–µ—Ç–∞–ª–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    full_prompt = BASE_PROMPT + "\n\n–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏:\n" + details

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    user_data["characters"][name] = {
        "prompt": full_prompt,
        "history": []
    }
    user_data["current"] = name  # —Å—Ä–∞–∑—É –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –Ω–µ–≥–æ
    update_user_data(user_id, user_data)

    await message.answer(
        f"{address}, –ø–µ—Ä—Å–æ–Ω–∞–∂ \"{name}\" —Å–æ–∑–¥–∞–Ω –∏ –≤—ã–±—Ä–∞–Ω –¥–ª—è –æ–±—â–µ–Ω–∏—è.\n\n"
        "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –æ–±—â–∞—Ç—å—Å—è —Å —ç—Ç–∏–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º, –∫–∞–∫ —Å –∂–∏–≤—ã–º. "
        "–ù–∞–ø–∏—à–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –æ—Ç–≤–µ—Ç–∏—Ç —Ç–µ–±–µ.",
        reply_markup=main_menu_keyboard()
    )
    await state.clear()


# –°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
@dp.message(Command("list"))
async def cmd_list(message: Message):
    user_id = str(message.from_user.id)
    user_data = get_user_data(user_id)

    # –ï—Å–ª–∏ –ø–æ–ª –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
    address = "–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    if user_data["gender"] is not None:
        address = get_gender_address(user_data["gender"]).capitalize()

    chars = user_data.get("characters", {})

    if not chars:
        await message.answer(f"{address}, —É —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π. –°–æ–∑–¥–∞–π –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π /create")
        return

    current = user_data.get("current")
    text = f"{address}, —Ç–≤–æ–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏:\n"
    for name in chars:
        if name == current:
            text += f"üëâ {name} (–≤—ã–±—Ä–∞–Ω)\n"
        else:
            text += f" - {name}\n"
    await message.answer(text)


# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ - —à–∞–≥ 1
@dp.message(Command("switch"))
async def cmd_switch(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    user_data = get_user_data(user_id)

    # –ï—Å–ª–∏ –ø–æ–ª –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
    address = "–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    if user_data["gender"] is not None:
        address = get_gender_address(user_data["gender"]).capitalize()

    if not user_data.get("characters"):
        await message.answer(f"{address}, —É —Ç–µ–±—è –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è. –°–æ–∑–¥–∞–π –∫–æ–º–∞–Ω–¥–æ–π /create")
        return

    await message.answer(f"{address}, –≤–≤–µ–¥–∏ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è:")
    await state.set_state(SwitchCharacter.waiting_for_name)


# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ - —à–∞–≥ 2
@dp.message(SwitchCharacter.waiting_for_name)
async def process_switch(message: Message, state: FSMContext):
    name = message.text.strip()
    user_id = str(message.from_user.id)
    user_data = get_user_data(user_id)

    # –ï—Å–ª–∏ –ø–æ–ª –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
    address = "–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    if user_data["gender"] is not None:
        address = get_gender_address(user_data["gender"]).capitalize()

    if name not in user_data.get("characters", {}):
        await message.answer(f"{address}, –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ—Ç. –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è:")
        return

    user_data["current"] = name
    update_user_data(user_id, user_data)
    await message.answer(
        f"{address}, –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ \"{name}\".\n"
        "–¢–µ–ø–µ—Ä—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –æ—Ç –ª–∏—Ü–∞ —ç—Ç–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.",
        reply_markup=main_menu_keyboard()
    )
    await state.clear()


# –û–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º
@dp.message(F.text & ~F.command)
async def chat_with_character(message: Message):
    user_id = str(message.from_user.id)
    user_data = get_user_data(user_id)
    current = user_data.get("current")

    if not current:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫–æ–º–∞–Ω–¥–∞–º–∏ /create –∏–ª–∏ /switch")
        return

    character = user_data["characters"][current]
    prompt = character["prompt"]
    history = character.get("history", [])

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    history.append({"role": "user", "content": message.text})

    try:
        reply = await ask_deepseek_api(message.text, history, prompt)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ DeepSeek API: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç AI –≤ –∏—Å—Ç–æ—Ä–∏—é
    history.append({"role": "assistant", "content": reply})

    # –û–±—Ä–µ–∑–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 20 —Å–æ–æ–±—â–µ–Ω–∏–π
    character["history"] = history[-20:]
    update_user_data(user_id, user_data)

    await message.answer(reply)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)


if __name__ == "__main__":

    asyncio.run(main())
